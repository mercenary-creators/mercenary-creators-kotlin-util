/*
 * Copyright (c) 2022, Mercenary Creators Company. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext {
        set('dokka_version', '1.6.0')
        set('kotlin_version', '1.7.10')
        set('jackson_version', '2.13.3')
        set('kotlinx_kover_version', '0.5.0')
        set('dependency_check_version', '7.1.1')
        set('kotlinx_coroutines_version', '1.6.3')
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath(group: 'org.jetbrains.dokka', name: 'dokka-gradle-plugin', version: dokka_version)
        classpath(group: 'org.jetbrains.kotlinx', name: 'kover', version: kotlinx_kover_version)
        classpath(group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: kotlin_version)
        classpath(group: 'org.owasp', name: 'dependency-check-gradle', version: dependency_check_version)
    }
}

plugins {
    id 'idea'
    id 'java'
    id 'signing'
    id 'java-library'
    id 'maven-publish'
}

apply plugin: 'org.jetbrains.dokka'
apply plugin: 'kover'
apply plugin: 'kotlin'
apply plugin: 'org.owasp.dependencycheck'

java {
    toolchain {
        it.languageVersion = JavaLanguageVersion.of(11)
    }
}

group = 'co.mercenary-creators'

version = '9.9.10-SNAPSHOT'

task doJavaDocs(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath + buildscript.configurations.classpath
    destinationDir = project.file("${buildDir}/docs/javadoc")
    include('co/mercenary/creators/**')
}

task deleteConfigs(type: Delete) {
    project.fileTree(dir: "${buildDir}/resources/main").each {
        it.delete()
    }
}

task checkQuality(dependsOn: dependencyCheckAnalyze)

check.dependsOn checkQuality

dependencyCheck {
    analyzers {
        assemblyEnabled = false
    }
    failOnError = false
    outputDirectory = "${buildDir}/reports/cve"
    suppressionFile = project.file('config/cve/suppress.xml')
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict', '-Xjvm-default=all', '-opt-in=kotlin.RequiresOptIn', "-opt-in=kotlin.contracts.ExperimentalContracts"]
        jvmTarget = '11'
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict', '-Xjvm-default=all', '-opt-in=kotlin.RequiresOptIn', "-opt-in=kotlin.contracts.ExperimentalContracts"]
        jvmTarget = '11'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: doJavaDocs) {
    archiveClassifier.set('javadoc')
    from "${buildDir}/docs/javadoc"
}

test {
    minHeapSize = '2048m'
    maxHeapSize = '8192m'
    testLogging.showStandardStreams = true
    useJUnitPlatform()
    setIgnoreFailures(true)
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(group: 'commons-io', name: 'commons-io', version: '2.11.0')
    implementation(group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36')
    implementation(group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.36')
    implementation(group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.36')
    implementation(group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.11')
    implementation(group: 'io.projectreactor.kotlin', name: 'reactor-kotlin-extensions', version: '1.1.6')
    implementation(group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1')
    implementation(group: 'io.github.microutils', name: 'kotlin-logging-jvm', version: '2.1.23')
    implementation(group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlin_version)
    implementation(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version)
    implementation(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: kotlinx_coroutines_version)
    implementation(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-jdk8', version: kotlinx_coroutines_version)
    implementation(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-jdk9', version: kotlinx_coroutines_version)
    implementation(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-reactor', version: kotlinx_coroutines_version)
    implementation(group: 'com.sun.activation', name: 'jakarta.activation', version: '2.0.1')
    implementation(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jackson_version)
    implementation(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jackson_version)
    implementation(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jackson_version)
    implementation(group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: jackson_version)
    implementation(group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jackson_version)
    implementation(group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: jackson_version)
    implementation(group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: jackson_version)
    implementation(group: 'com.fasterxml.jackson.module', name: 'jackson-module-jsonSchema', version: jackson_version)
    implementation(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jackson_version)
    implementation(group: 'com.jayway.jsonpath', name: 'json-path', version: '2.7.0')
    implementation(group: 'io.projectreactor', name: 'reactor-core', version: '3.4.19')
    testImplementation(group: 'io.projectreactor', name: 'reactor-test', version: '3.4.19')
    testImplementation(group: 'junit', name: 'junit', version: '4.13.2')
    testImplementation(group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit5', version: kotlin_version)
    testImplementation(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-test', version: kotlinx_coroutines_version)
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.2')
    testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.2')
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

String getBuildModuleVersion() {
    version
}

String getRepoUploadArchivesOf() {
    getBuildModuleVersion().endsWith('SNAPSHOT') ? 'https://oss.sonatype.org/content/repositories/snapshots/' : 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
}

String getUserNameUploadArchives() {
    project.findProperty('sonatype_username') ?: ''
}

String getPassWordUploadArchives() {
    project.findProperty('sonatype_password') ?: ''
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        library(MavenPublication) {
            from components.java
            version = "9.9.9-SNAPSHOT"
            groupId = 'co.mercenary-creators'
            artifactId = "mercenary-creators-kotlin-util"
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = "Mercenary Creators Kotlin Util"
                description = "A Kotlin Utility Library"
                url = 'https://github.com/mercenary-creators/mercenary-creators-kotlin-util'
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "SprocketNYC"
                        name = "Dean S Jones"
                        email = "deansjones@gmail.com"
                    }
                }
                scm {
                    connection = 'scm:git@github.com:mercenary-creators/mercenary-creators-kotlin-util.git'
                    developerConnection = 'scm:git@github.com:mercenary-creators/mercenary-creators-kotlin-util.git'
                    url = 'scm:git@github.com:mercenary-creators/mercenary-creators-kotlin-util.git'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'SonatypeRepository'
            credentials(PasswordCredentials)
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
}

List<String> getJavaDocLinks() {
    def list = []
    def data = project.file('config/javadoc/JAVADOC_LINK_SITES.txt')
    if (data.exists()) {
        data.eachLine {
            list << it
        }
    }
    list
}
